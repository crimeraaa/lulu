---
Language:      Cpp
BasedOnStyle:  LLVM
Standard:      c++17

AccessModifierOffset: -4


# Used for Python-style separation of functions with documentation comments.
MaxEmptyLinesToKeep: 2


# === INDENT
# LLVM doesn't use tabs, so we don't care about 'TabWidth' and co.
IndentWidth: 4

# For clarity, goto labels must be flushed completely to the left.
IndentGotoLabels: false


# === BREAKS

# Don't break the '=' operator in a declaration.
BreakBeforeBinaryOperators: NonAssignment

# Always attach left-brace '{' to surrounding context except for functions.
BreakBeforeBraces: Custom
BraceWrapping:
  AfterClass: true
  
  # Braces attached to 'if', 'for' and 'while' are only on a new line if
  # the controlling expression spans multiple lines.
  AfterControlStatement: MultiLine
  AfterFunction: true
  
  # Empty functions will not wrap the opening '{' brace,
  # resulting in the form `void f()\n{}`.
  SplitEmptyFunction: false


# === STRINGS
# Don't split long string literals, even if they exceed our column limit,
# to make them easier to grep.
BreakStringLiterals: false


# === FUNCTIONS

# Return type is on a separate line from the function identifier in both
# function declarations and definitions.
AlwaysBreakAfterReturnType: All

# Only empty functions will have the form 'int f()\n{}'
AllowShortFunctionsOnASingleLine: Empty

# Parameters in function signatures and arguments in function calls will be on
# a newline from the opening '('. The closing ')' will also be on a newline.
AlignAfterOpenBracket: BlockIndent

# Function signatures
BinPackParameters: false
AllowAllParametersOfDeclarationOnNextLine: false

# Function calls
BinPackArguments: false
AllowAllArgumentsOnNextLine: false


# === TEMPLATES 
# 'template<...>' is always separate from 'struct|class'.
AlwaysBreakTemplateDeclarations: Yes


# Don't add a whitespace after 'template' no matter what.
SpaceAfterTemplateKeyword: false


# === ALIGNMENT
AlignConsecutiveDeclarations: Consecutive
AlignConsecutiveAssignments:  Consecutive
AlignConsecutiveMacros:       Consecutive
AlignConsecutiveBitFields:    Consecutive

# === PENALTY
# When we need to break on an assignment statement, the broken line has 4
# spaces added to it.
PenaltyBreakAssignment: 4


# === PREPROCESSOR
# C preprocessing directives are indented *after* the '#' character.
IndentPPDirectives: AfterHash

# AttributeMacros: ['LULU_ATTR_PRINTF']
# StatementAttributeLikeMacros: ['LULU_ATTR_PRINTF']
WhitespaceSensitiveMacros:
  - TOKEN_PASTE
  - TOKEN_STRINGIFY
  - X__TOKEN_STRINGIFY
...

