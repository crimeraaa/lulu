#!/usr/bin/env lua

require "util/common"
require "util/table"
require "util/string"

local SCRIPT_PATH = script_path()
local LULU_SRC    = SCRIPT_PATH .. "src/"
local LULU_EXE    = SCRIPT_PATH .. "bin/lulu"

local function make_cmdline(exe, flags, pargs)
    local cmdline = string.join(exe, flags)
    -- lulu can't handle "--" in its command-line arguments.
    if pargs and #pargs > 0 and exe ~= LULU_EXE then
        table.insert(pargs, 1, "--")
    end
    return string.join(cmdline, pargs)
end

local function capture_cmdline(exe, flags, pargs)
    local cmdline = make_cmdline(exe, flags, pargs)
    return cmdline, io.popen(cmdline, 'r'):read("*all")
end

-- Used mainly if we have interactive prompts, as io.popen won't print prompts.
local function execute_cmdline(exe, flags, pargs)
    local cmdline = make_cmdline(exe, flags, pargs)
    return cmdline, os.execute(cmdline)
end

local function confirm_cmdline(action, targets)
    local choices = {yes = true,  y = true,
                     no  = false, n = false}
    io.stdout:write("[WARNING]:\n",
                    "We are about to '", action, "' on:\n",
                    table.concat(targets, '\n'), '\n',
                    "Do you want to continue? (y/n): ")

    local input  = io.stdin:read("*line")
    if input == nil then
        io.stdout:write("Received EOF.\n")
        return false
    end

    local choice = choices[input:lower()]
    if choice == true then
        io.stdout:write("Confirmed. Proceeding.\n")
        return true
    elseif choice == false then
        io.stdout:write("Confirmed. Aborting.\n")
        return false
    else
        io.stdout:write("Unknown option '", input, "'. Aborting.\n")
        return false
    end
end

-- Append `default` if no pargs were given.
local function set_pargs_if_empty(pargs, default)
    if #pargs == 0 then
        table.insert(pargs, default)
    end
    return pargs
end

-- OPTIONS ---------------------------------------------------------------- {{{1

local options = {}

local function make_pathopt()
    return string.format("[path...=\'%s\']", LULU_SRC)
end

local function make_regexarg(regex)
    if regex:match("^%-%-regexp=") then
        regex = regex:match("^%-%-regexp=(.+)")
    end
    local quote = (regex:match("^\'") and '\"') or '\''
    return string.format("--regexp=" .. quote .. "%s" .. quote, regex)
end

-- FIND IN FILES ---------------------------------------------------------- {{{2

options["find-pretty"] = {
    exe = "rg",
    flags = {"--line-number", "--color=always", "--heading"},
    usage = "<pattern> " .. make_pathopt(),
    help = "Pretty-prints all occurences of <pattern> in [path...].",
    note = "Uses ripgrep and assumes it is installed.",
    init = function(self, pargs)
        local regex = table.remove(pargs, 1)
        if not regex then
            return false, "No pattern received"
        end
        set_pargs_if_empty(pargs, LULU_SRC)
        table.insert(self.flags, make_regexarg(regex))
        return true, nil
    end,
    call = function(self, pargs)
        local ok, msg = self:init(pargs)
        if not ok then
            return nil, nil, msg
        end
        local cmdline, output = capture_cmdline(self.exe, self.flags, pargs)
        return cmdline, output, nil
    end,
}

options["find-terse"] = {
    exe = "rg",
    flags = {"--files-with-matches", "--color=never"},
    help = "Lists filenames for matches of <pattern> in [path...].",
    usage = options["find-pretty"].usage,
    note = options["find-pretty"].note,
    init = options["find-pretty"].init,
    call = options["find-pretty"].call,
}

-- 2}}} ------------------------------------------------------------------------

-- FIND AND REPLACE ------------------------------------------------------- {{{2

options["find-and-replace"] = {
    exe = "vim",
    flags = {"-e", "-u NONE", "-c ':xa'"}, -- ex mode, no .vimrc, save & exit
    usage = "<pattern> <subst> " .. make_pathopt(),
    help = "In [path...], replaces all occurences of <pattern> with <subst>.",
    note = "Please ensure <pattern> works for both ripgrep and vim (magic).",
    init = function(self, pargs)
        local regex = table.remove(pargs, 1)
        local subst = table.remove(pargs, 1) -- was shifted down by 1 index
        if not regex or not subst then
            return false, "No pattern and/or substitution received."
        end
        set_pargs_if_empty(pargs, LULU_SRC)

        -- Apply to all opened buffers, use magic to be more Perl-ish regex.
        local bufdo = string.format("-c ':bufdo! %%s/\\v%s/%s/ge'", regex, subst)

        -- Insert BEFORE (array[len]) `-c ':xa'`, not AFTER (array[len + 1]).
        table.insert(self.flags, #self.flags, bufdo)
        return true, nil
    end,
    call = function(self, pargs)
        -- save so we can prepend to find-terse after self:init()
        local regex = pargs[1]
        local ok, msg = self:init(pargs)
        if not ok then
            return nil, nil, msg
        end
        -- find-terse requires the regex as the first parg.
        table.insert(pargs, 1, regex)
        local find, matchlist = options["find-terse"]:call(pargs)
        if matchlist == "" then
            return nil, nil, "No matches found."
        end

        -- find-terse will output a newline-separated string of filenames.
        -- Pass these file names as positional arguments for Vim to open.
        local buflist = matchlist:split('\n')
        if not confirm_cmdline("find-and-replace", buflist) then
            return nil, nil, "Command aborted."
        end
        local vim, output = capture_cmdline(self.exe, self.flags, buflist)
        return find .. '\n' .. vim, output, nil
    end,
}

-- 2}}} ------------------------------------------------------------------------

-- WHITESPACE COMMANDS ---------------------------------------------------- {{{2

options["find-whitespace"] = {
    exe = nil,
    flags = nil,
    usage = make_pathopt(),
    help = "List names of files from [path...] that have trailing whitespace.",
    note = "See `find-terse` for more info on how the search is done.",
    regex = [[\s+$]],
    init = function(self, pargs)
        -- Prepend since find-terse expects regex as the first parg
        table.insert(pargs, 1, self.regex)
        return true
    end,
    call = function(self, pargs)
        self:init(set_pargs_if_empty(pargs, LULU_SRC))
        return options["find-terse"]:call(pargs)
    end,
}

options["fix-whitespace"] = {
    exe = nil,
    flags = nil,
    regex = options["find-whitespace"].regex,
    usage = options["find-whitespace"].usage,
    help = "Strips files from [path...] of trailing whitespace.",
    note = "See `find-and-replace` for more info.",
    call = function(self, pargs)
        -- find-and-replaces calls find-terse which needs <pattern> <subst>
        table.insert(pargs, 1, self.regex)
        table.insert(pargs, 2, "")
        return options["find-and-replace"]:call(pargs)
    end,
}

-- 2}}} ------------------------------------------------------------------------

-- RUNNER COMMANDS -------------------------------------------------------- {{{2

options["run"] = {
    exe = LULU_EXE,
    flags = {},
    usage = "[script]",
    help = "Runs the lulu interpreter.",
    note = "If [script] is not given we will use REPL.",
    call = function(self, pargs)
        return execute_cmdline(self.exe, self.flags, pargs)
    end
}

options["memcheck"] = {
    exe = "valgrind",
    flags = {"--leak-check=full", "--track-origins=yes", "--show-leak-kinds=all"},
    usage = "[exe='" .. LULU_EXE .. "' [,args...]]",
    help = "Runs valgrind with some helpful options.",
    note = "If [exe] is not given we will default to " .. LULU_EXE .. ".",
    call = function(self, pargs)
        return execute_cmdline(self.exe, self.flags, set_pargs_if_empty(pargs, LULU_EXE))
    end
}

local LUA_RESERVED = {["do"] = true,
                      ["if"] = true,
                      ["in"] = true,
                      ["io"] = true,
                      ["or"] = true}

options["overflow-locals"] = {
    -- exe = "lua",
    exe  = LULU_EXE,
    flags = nil,
    name = SCRIPT_PATH .. "tests/overflow-locals.lua",
    usage = "[rows=12] [columns=18]",
    help = "Generates 'overflow-locals.lua' to test Lua's local variable limits.",
    note = "By default, Lua will throw an error at around 200.",
    rows = 0,
    cols = 0,
    file = nil, ---@type file*
    init = function(self, pargs)
        if #pargs == 0 then
            self.rows = 12
            self.cols = 18
        elseif #pargs == 2 then
            self.rows = table.remove(pargs, 1)
            self.cols = table.remove(pargs, 1)
        else
            return false, "Please specify exactly only #rows and #columns."
        end
        local ok, msg = self:open(pargs)
        if not ok then
            return false, msg
        end
        return true
    end,
    open = function(self, pargs)
        pargs[1] = self.name
        local file, err = io.open(pargs[1], 'w')
        if not file then
            return false, err
        end
        self.file = file
        self.file:write("-- Generated by \'", arg[0], "\'\n")
        return true
    end,
    generate = function(self, file)
        local lower = string.byte('a')
        for outer = 0, self.rows do
            local names = {}
            for inner = 0, self.cols do
                local name = string.char(lower + outer, lower + inner)
                if not LUA_RESERVED[name] then
                    names[#names + 1] = name
                end
            end
            file:write("local ", table.concat(names, ','), '\n')
        end
        file:write('\n')
        file:close()
    end,
    call = function(self, pargs)
        local ok, msg = self:init(pargs)
        if not ok then
            return nil, nil, msg
        end
        self:generate(self.file)
        return capture_cmdline(self.exe, self.flags, pargs)
    end,
}

local function overflow_stack(file, current, limit)
    if (current > limit) then
        return
    end
    overflow_stack(file, current + 1)
end

options["overflow-stack"] = {
    exe   = LULU_EXE,
    flags = nil,
    name  = SCRIPT_PATH .. "tests/overflow-stack.lua",
    limit = 0,
    file  = nil, ---@type file*
    usage = "[limit]",
    help  = "Generates a file that manually calculates the summation of [limit].",
    note  = "By default, Lulu *should* error at 256 stack slots.",
    init  = function(self, pargs)
        if #pargs == 0 then
            self.limit = 10
        elseif #pargs == 1 then
            self.limit = tonumber(table.remove(pargs, 1))
        else
            return false, "Please specify exactly only #limit."
        end
        local ok, msg = self:open(pargs)
        if not ok then
            return false, msg
        end
        return true
    end,
    open  = options["overflow-locals"].open,
    recurse = function(self, file, acc, limit)
        if acc > limit then
            file:write(acc)
            return
        end
        file:write('(', acc, " + ")
        self:recurse(file, acc + 1, limit)
        file:write(')')
    end,
    generate = function(self, file)
        file:write("print")
        self:recurse(file, 1, self.limit)
        file:write('\n')
        file:close()
    end,
    call  = function(self, pargs)
        local ok, msg = self:init(pargs)
        if not ok then
            return nil, nil, msg
        end
        self:generate(self.file)
        return capture_cmdline(self.exe, self.flags, pargs)
    end,
}

-- 2}}} ------------------------------------------------------------------------

-- HELP UTILITY ----------------------------------------------------------- {{{2

local aliases = {
    ["find"]    = "find-pretty",
    ["replace"] = "find-and-replace",
    ["trim"]    = "fix-whitespace",
    ["--help"]  = "help",
    ["-h"]      = "help",
}

local function print_opt(opt, name)
    local alias = aliases[name]
    opt = opt or options[alias]
    if not opt and not alias then
        io.stdout:write("Unknown option '", name, "\'.\n")
        return
    end
    io.stdout:write(name, ' ', opt.usage, '\n')
    if alias then
        io.stdout:write("\t\'", name, "\' is an alias for \'", alias, "\'.\n")
    end
    if opt.exe then
        local cmdline = make_cmdline(opt.exe, opt.flags)
        io.stdout:write("\tInvokes: ", cmdline, '\n')
    end
    io.stdout:write('\t', opt.help, '\n',
                    '\t', opt.note, '\n',
                    '\n')
end

options["help"] = {
    exe = nil,
    flags = nil,
    usage = "[option...=all]",
    help = "Gets information about each command in [option...].",
    note = "If no option/s is/are given we will list help for all commands.",
    call = function(self, pargs)
        if #pargs == 0 then
            pargs = table.array_of_keys(options)
            io.stdout:write("The following aliases are provided:\n")
            for alias, target in pairs(aliases) do
                local pretty = string.format("%-8s => %s", alias, target)
                io.stdout:write('\t', pretty, '\n')
            end
            io.stdout:write('\n')
        end
        for _, name in ipairs(pargs) do
            print_opt(options[name], name)
        end
        return "", "", nil
    end,
}

-- 2}}} ------------------------------------------------------------------------

-- 1}}} ------------------------------------------------------------------------

local function main(argc, argv)
    if argc == 0 then
        io.stderr:write("[USAGE]: ", argv[0], " <option [args...]>\n")
        io.stderr:write("\tFor more information see `", argv[0], " help`.\n")
        return 1
    end
    local opt = options[argv[1]] or options[aliases[argv[1]]]
    if not opt then
        io.stderr:write("[ERROR]:\n", "Unknown option '", argv[1], "\'.\n")
        return 1
    end
    local cmdline, output, errmsg = opt:call(table.slice(argv, 2))
    if opt == options["help"] then
        return 0
    end
    if errmsg then
        io.stdout:write("[ERROR]:\n", argv[1], ": ", errmsg, '\n')
    else
        io.stdout:write("[COMMAND]:\n", cmdline, '\n')
        io.stdout:write("[OUTPUT]:\n", output, '\n')
    end
    return 0
end

return main(#arg, arg)
